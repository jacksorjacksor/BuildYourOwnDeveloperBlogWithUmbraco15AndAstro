/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Umbraco Delivery API
 * You can find out more about the Umbraco Delivery API in [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api).
 * OpenAPI spec version: Latest
 */
import type {
  GetMedia20400,
  GetMedia20Params,
  GetMedia400,
  GetMediaItemById20Params,
  GetMediaItemByIdParams,
  GetMediaItemByPath20Params,
  GetMediaItemByPathParams,
  GetMediaItemParams,
  GetMediaItems20Params,
  GetMediaParams,
  IApiMediaWithCropsResponseModel,
  PagedIApiMediaWithCropsResponseModel
} from '.././model';


/**
 * @deprecated
 */
export type getMediaResponse200 = {
  data: PagedIApiMediaWithCropsResponseModel
  status: 200
}

export type getMediaResponse400 = {
  data: GetMedia400
  status: 400
}
    
export type getMediaResponseComposite = getMediaResponse200 | getMediaResponse400;
    
export type getMediaResponse = getMediaResponseComposite & {
  headers: Headers;
}

export const getGetMediaUrl = (params?: GetMediaParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v1/media?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v1/media`
}

export const getMedia = async (params?: GetMediaParams, options?: RequestInit): Promise<getMediaResponse> => {
  
  const res = await fetch(getGetMediaUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getMediaResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getMediaResponse
}


export type getMedia20Response200 = {
  data: PagedIApiMediaWithCropsResponseModel
  status: 200
}

export type getMedia20Response400 = {
  data: GetMedia20400
  status: 400
}
    
export type getMedia20ResponseComposite = getMedia20Response200 | getMedia20Response400;
    
export type getMedia20Response = getMedia20ResponseComposite & {
  headers: Headers;
}

export const getGetMedia20Url = (params?: GetMedia20Params,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v2/media?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v2/media`
}

export const getMedia20 = async (params?: GetMedia20Params, options?: RequestInit): Promise<getMedia20Response> => {
  
  const res = await fetch(getGetMedia20Url(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getMedia20Response['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getMedia20Response
}


/**
 * @deprecated
 */
export type getMediaItemResponse200 = {
  data: IApiMediaWithCropsResponseModel[]
  status: 200
}
    
export type getMediaItemResponseComposite = getMediaItemResponse200;
    
export type getMediaItemResponse = getMediaItemResponseComposite & {
  headers: Headers;
}

export const getGetMediaItemUrl = (params?: GetMediaItemParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v1/media/item?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v1/media/item`
}

export const getMediaItem = async (params?: GetMediaItemParams, options?: RequestInit): Promise<getMediaItemResponse> => {
  
  const res = await fetch(getGetMediaItemUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getMediaItemResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getMediaItemResponse
}


/**
 * @deprecated
 */
export type getMediaItemByPathResponse200 = {
  data: IApiMediaWithCropsResponseModel
  status: 200
}

export type getMediaItemByPathResponse404 = {
  data: void
  status: 404
}
    
export type getMediaItemByPathResponseComposite = getMediaItemByPathResponse200 | getMediaItemByPathResponse404;
    
export type getMediaItemByPathResponse = getMediaItemByPathResponseComposite & {
  headers: Headers;
}

export const getGetMediaItemByPathUrl = (path: string,
    params?: GetMediaItemByPathParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v1/media/item/${path}?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v1/media/item/${path}`
}

export const getMediaItemByPath = async (path: string,
    params?: GetMediaItemByPathParams, options?: RequestInit): Promise<getMediaItemByPathResponse> => {
  
  const res = await fetch(getGetMediaItemByPathUrl(path,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getMediaItemByPathResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getMediaItemByPathResponse
}


export type getMediaItemByPath20Response200 = {
  data: IApiMediaWithCropsResponseModel
  status: 200
}

export type getMediaItemByPath20Response404 = {
  data: void
  status: 404
}
    
export type getMediaItemByPath20ResponseComposite = getMediaItemByPath20Response200 | getMediaItemByPath20Response404;
    
export type getMediaItemByPath20Response = getMediaItemByPath20ResponseComposite & {
  headers: Headers;
}

export const getGetMediaItemByPath20Url = (path: string,
    params?: GetMediaItemByPath20Params,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v2/media/item/${path}?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v2/media/item/${path}`
}

export const getMediaItemByPath20 = async (path: string,
    params?: GetMediaItemByPath20Params, options?: RequestInit): Promise<getMediaItemByPath20Response> => {
  
  const res = await fetch(getGetMediaItemByPath20Url(path,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getMediaItemByPath20Response['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getMediaItemByPath20Response
}


/**
 * @deprecated
 */
export type getMediaItemByIdResponse200 = {
  data: IApiMediaWithCropsResponseModel
  status: 200
}

export type getMediaItemByIdResponse404 = {
  data: void
  status: 404
}
    
export type getMediaItemByIdResponseComposite = getMediaItemByIdResponse200 | getMediaItemByIdResponse404;
    
export type getMediaItemByIdResponse = getMediaItemByIdResponseComposite & {
  headers: Headers;
}

export const getGetMediaItemByIdUrl = (id: string,
    params?: GetMediaItemByIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v1/media/item/${id}?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v1/media/item/${id}`
}

export const getMediaItemById = async (id: string,
    params?: GetMediaItemByIdParams, options?: RequestInit): Promise<getMediaItemByIdResponse> => {
  
  const res = await fetch(getGetMediaItemByIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getMediaItemByIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getMediaItemByIdResponse
}


export type getMediaItemById20Response200 = {
  data: IApiMediaWithCropsResponseModel
  status: 200
}

export type getMediaItemById20Response404 = {
  data: void
  status: 404
}
    
export type getMediaItemById20ResponseComposite = getMediaItemById20Response200 | getMediaItemById20Response404;
    
export type getMediaItemById20Response = getMediaItemById20ResponseComposite & {
  headers: Headers;
}

export const getGetMediaItemById20Url = (id: string,
    params?: GetMediaItemById20Params,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v2/media/item/${id}?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v2/media/item/${id}`
}

export const getMediaItemById20 = async (id: string,
    params?: GetMediaItemById20Params, options?: RequestInit): Promise<getMediaItemById20Response> => {
  
  const res = await fetch(getGetMediaItemById20Url(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getMediaItemById20Response['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getMediaItemById20Response
}


export type getMediaItems20Response200 = {
  data: IApiMediaWithCropsResponseModel[]
  status: 200
}
    
export type getMediaItems20ResponseComposite = getMediaItems20Response200;
    
export type getMediaItems20Response = getMediaItems20ResponseComposite & {
  headers: Headers;
}

export const getGetMediaItems20Url = (params?: GetMediaItems20Params,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v2/media/items?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v2/media/items`
}

export const getMediaItems20 = async (params?: GetMediaItems20Params, options?: RequestInit): Promise<getMediaItems20Response> => {
  
  const res = await fetch(getGetMediaItems20Url(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getMediaItems20Response['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getMediaItems20Response
}


