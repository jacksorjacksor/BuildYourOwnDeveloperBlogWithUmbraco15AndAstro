/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Umbraco Delivery API
 * You can find out more about the Umbraco Delivery API in [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api).
 * OpenAPI spec version: Latest
 */
import type {
  GetContent20400,
  GetContent20Params,
  GetContent400,
  GetContentItemById20Params,
  GetContentItemByIdParams,
  GetContentItemByPath20Params,
  GetContentItemByPathParams,
  GetContentItemParams,
  GetContentItems20Params,
  GetContentParams,
  IApiContentResponseModel,
  PagedIApiContentResponseModel
} from '.././model';


/**
 * @deprecated
 */
export type getContentResponse200 = {
  data: PagedIApiContentResponseModel
  status: 200
}

export type getContentResponse400 = {
  data: GetContent400
  status: 400
}

export type getContentResponse404 = {
  data: void
  status: 404
}
    
export type getContentResponseComposite = getContentResponse200 | getContentResponse400 | getContentResponse404;
    
export type getContentResponse = getContentResponseComposite & {
  headers: Headers;
}

export const getGetContentUrl = (params?: GetContentParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v1/content?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v1/content`
}

export const getContent = async (params?: GetContentParams, options?: RequestInit): Promise<getContentResponse> => {
  
  const res = await fetch(getGetContentUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getContentResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getContentResponse
}


export type getContent20Response200 = {
  data: PagedIApiContentResponseModel
  status: 200
}

export type getContent20Response400 = {
  data: GetContent20400
  status: 400
}

export type getContent20Response404 = {
  data: void
  status: 404
}
    
export type getContent20ResponseComposite = getContent20Response200 | getContent20Response400 | getContent20Response404;
    
export type getContent20Response = getContent20ResponseComposite & {
  headers: Headers;
}

export const getGetContent20Url = (params?: GetContent20Params,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v2/content?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v2/content`
}

export const getContent20 = async (params?: GetContent20Params, options?: RequestInit): Promise<getContent20Response> => {
  
  const res = await fetch(getGetContent20Url(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getContent20Response['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getContent20Response
}


/**
 * @deprecated
 */
export type getContentItemResponse200 = {
  data: IApiContentResponseModel[]
  status: 200
}

export type getContentItemResponse401 = {
  data: void
  status: 401
}
    
export type getContentItemResponseComposite = getContentItemResponse200 | getContentItemResponse401;
    
export type getContentItemResponse = getContentItemResponseComposite & {
  headers: Headers;
}

export const getGetContentItemUrl = (params?: GetContentItemParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v1/content/item?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v1/content/item`
}

export const getContentItem = async (params?: GetContentItemParams, options?: RequestInit): Promise<getContentItemResponse> => {
  
  const res = await fetch(getGetContentItemUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getContentItemResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getContentItemResponse
}


/**
 * @deprecated
 */
export type getContentItemByPathResponse200 = {
  data: IApiContentResponseModel
  status: 200
}

export type getContentItemByPathResponse401 = {
  data: void
  status: 401
}
    
export type getContentItemByPathResponseComposite = getContentItemByPathResponse200 | getContentItemByPathResponse401;
    
export type getContentItemByPathResponse = getContentItemByPathResponseComposite & {
  headers: Headers;
}

export const getGetContentItemByPathUrl = (path: string,
    params?: GetContentItemByPathParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v1/content/item/${path}?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v1/content/item/${path}`
}

export const getContentItemByPath = async (path: string,
    params?: GetContentItemByPathParams, options?: RequestInit): Promise<getContentItemByPathResponse> => {
  
  const res = await fetch(getGetContentItemByPathUrl(path,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getContentItemByPathResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getContentItemByPathResponse
}


export type getContentItemByPath20Response200 = {
  data: IApiContentResponseModel
  status: 200
}

export type getContentItemByPath20Response401 = {
  data: void
  status: 401
}
    
export type getContentItemByPath20ResponseComposite = getContentItemByPath20Response200 | getContentItemByPath20Response401;
    
export type getContentItemByPath20Response = getContentItemByPath20ResponseComposite & {
  headers: Headers;
}

export const getGetContentItemByPath20Url = (path: string,
    params?: GetContentItemByPath20Params,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v2/content/item/${path}?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v2/content/item/${path}`
}

export const getContentItemByPath20 = async (path: string,
    params?: GetContentItemByPath20Params, options?: RequestInit): Promise<getContentItemByPath20Response> => {
  
  const res = await fetch(getGetContentItemByPath20Url(path,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getContentItemByPath20Response['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getContentItemByPath20Response
}


/**
 * @deprecated
 */
export type getContentItemByIdResponse200 = {
  data: IApiContentResponseModel
  status: 200
}

export type getContentItemByIdResponse401 = {
  data: void
  status: 401
}
    
export type getContentItemByIdResponseComposite = getContentItemByIdResponse200 | getContentItemByIdResponse401;
    
export type getContentItemByIdResponse = getContentItemByIdResponseComposite & {
  headers: Headers;
}

export const getGetContentItemByIdUrl = (id: string,
    params?: GetContentItemByIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v1/content/item/${id}?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v1/content/item/${id}`
}

export const getContentItemById = async (id: string,
    params?: GetContentItemByIdParams, options?: RequestInit): Promise<getContentItemByIdResponse> => {
  
  const res = await fetch(getGetContentItemByIdUrl(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getContentItemByIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getContentItemByIdResponse
}


export type getContentItemById20Response200 = {
  data: IApiContentResponseModel
  status: 200
}

export type getContentItemById20Response401 = {
  data: void
  status: 401
}
    
export type getContentItemById20ResponseComposite = getContentItemById20Response200 | getContentItemById20Response401;
    
export type getContentItemById20Response = getContentItemById20ResponseComposite & {
  headers: Headers;
}

export const getGetContentItemById20Url = (id: string,
    params?: GetContentItemById20Params,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v2/content/item/${id}?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v2/content/item/${id}`
}

export const getContentItemById20 = async (id: string,
    params?: GetContentItemById20Params, options?: RequestInit): Promise<getContentItemById20Response> => {
  
  const res = await fetch(getGetContentItemById20Url(id,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getContentItemById20Response['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getContentItemById20Response
}


export type getContentItems20Response200 = {
  data: IApiContentResponseModel[]
  status: 200
}

export type getContentItems20Response401 = {
  data: void
  status: 401
}
    
export type getContentItems20ResponseComposite = getContentItems20Response200 | getContentItems20Response401;
    
export type getContentItems20Response = getContentItems20ResponseComposite & {
  headers: Headers;
}

export const getGetContentItems20Url = (params?: GetContentItems20Params,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `http://localhost:48006/umbraco/delivery/api/v2/content/items?${stringifiedParams}` : `http://localhost:48006/umbraco/delivery/api/v2/content/items`
}

export const getContentItems20 = async (params?: GetContentItems20Params, options?: RequestInit): Promise<getContentItems20Response> => {
  
  const res = await fetch(getGetContentItems20Url(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getContentItems20Response['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getContentItems20Response
}


